import React, { useMemo, useState, useEffect } from "react";
import axios from 'axios';
import { useTable } from "react-table";

import DateTimePicker from 'react-datetime-picker/dist/entry.nostyle';
import 'react-calendar/dist/Calendar.css';
import 'react-time-picker/dist/TimePicker.css'
import 'react-datetime-picker/dist/DateTimePicker.css'
import 'react-clock/dist/Clock.css'

import './table.css'

// const EventList = (props) => (

//   <div>
//     {props.v_events.map(v_event => <VEvent key={v_event.id} {...v_event}/>)}
//   </div>

// )

// const VEvent = (props) => {

//   const v_event = props;

//   return (
//     <div className="volunteer-event">
//     <div className="volunteer-id">{v_event.id} </div>
//     <div className="volunteer-event-name">{v_event.name} </div>
//     <div className="volunteer-startdatetime">{v_event.startdatetime}</div>
//     <div className="volunteer-enddatetime">{v_event.enddatetime}</div>
//     </div>

//   )
// }

function formatAppDate(dateTimeString){

  return(
    dateTimeString.getUTCFullYear() + "/" +
    ("0" + (dateTimeString.getUTCMonth()+1)).slice(-2) + "/" +
    ("0" + dateTimeString.getUTCDate()).slice(-2) + " " +
    ("0" + dateTimeString.getUTCHours()).slice(-2) + ":" +
    ("0" + dateTimeString.getUTCMinutes()).slice(-2) + ":" +
    ("0" + dateTimeString.getUTCSeconds()).slice(-2)
  )
}

const Form = props => {

  const [name, setName] = useState('');
  const [startDateTime, setStartDateTime] = useState(new Date());
  const [endDateTime, setEndDateTime] = useState(new Date());

  const handleSubmit = async (event) => {
  	event.preventDefault();

    console.log(name);
    console.log(startDateTime);
    console.log(endDateTime);
    
    await axios.post(`http://localhost:3000/events`,{
      name: name,
      startdatetime: formatAppDate(startDateTime),
      enddatetime: formatAppDate(endDateTime)
    });

    props.onSubmit();
    setName('');
    setStartDateTime(new Date());
    setEndDateTime(new Date());
  
  };

    return(
    
    <form onSubmit={handleSubmit}>
      <div>
    <label>
      Event Name:
        <input 
          type="text" 
          value ={name}
          onChange={event => setName(event.target.value)}
          placeholder="Event Name" 
          required 
          />
      </label>
      </div>
      <br/>
      <div>
      <div>
        <label>
          Start Date/Time:
          <DateTimePicker onChange={setStartDateTime} value={startDateTime} disableClock='true' />
          {/* <Calendar onChange={setStartDateTime} value={startDateTime} />             */}
        </label>
      </div>
      <>
        <label>
          End Date/Time:
          <DateTimePicker onChange={setEndDateTime} value={endDateTime} disableClock='true'/>
          {/* <Calendar onChange={setEndDateTime} value={endDateTime} />   */}
        </label>
      </>
      </div>
      <br/>
      <button>Add New Event</button>
    </form>
    )
}

function Table({columns, data}) {

  const {
    getTableProps, // table props from react-table
    getTableBodyProps, // table body props from react-table
    headerGroups, // headerGroups, if your table has groupings
    rows, // rows for the table based on the data passed
    prepareRow // Prepare the row (this function needs to be called for each row before getting the row props)
  } = useTable({
    columns,
    data
  });

  /* 
    Render the UI for your table
    - react-table doesn't have UI, it's headless. We just need to put the react-table props from the Hooks, and it will do its magic automatically
  */
  return (
    <table {...getTableProps()}>
      <thead>
        {headerGroups.map(headerGroup => (
          <tr {...headerGroup.getHeaderGroupProps()}>
            {headerGroup.headers.map(column => (
              <th {...column.getHeaderProps()}>{column.render("Header")}</th>
            ))}
          </tr>
        ))}
      </thead>
      <tbody {...getTableBodyProps()}>
        {rows.map((row, i) => {
          prepareRow(row);
          return (
            <tr {...row.getRowProps()}>
              {row.cells.map(cell => {
                return <td {...cell.getCellProps()}>{cell.render("Cell")}</td>;
              })}
            </tr>
          );
        })}
      </tbody>
    </table>
  );
}

const App = () => {

  const [v_events, setV_events] = useState([]);

  useEffect(() => {
    (async () => {
      const result = await axios(`http://localhost:3000/events`);
      setV_events(result.data);
    })();
  }, []);

  const refreshEvents = () =>
  {

   axios(`http://localhost:3000/events`).then (
    result => {
        setV_events(result.data);
    }
      );

  }

  const columns = useMemo(
    () => [
  
        {Header: "Name",
        accessor: "name"},
        {Header: "Start Date/Time",
        accessor: "startdatetime"},
        {Header: "End Date/Time",
        accessor: "enddatetime"}
  
    ],
    []
  
  )

  return (
    <div>
      <div className="header">Event Management</div>
      <br></br>

      <Form onSubmit={refreshEvents}/>
      {/* <EventList v_events={v_events}/> */}
      <Table columns={columns} data={v_events} />

    </div>
  );

}

export default App;