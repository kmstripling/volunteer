// src/Calendar.tsx
import React2, { useMemo, useState, forwardRef } from "react";
import calendarize from "calendarize";

// src/getWeekdays.ts
var getWeekdays = (locale, offset) => {
  const commonYearStartingOnSunday = new Date(2023, 0, 1);
  const weekdays = [];
  for (let i = 0; i < 7; i++) {
    weekdays.push(commonYearStartingOnSunday.toLocaleDateString(locale, { weekday: "long" }));
    commonYearStartingOnSunday.setDate(commonYearStartingOnSunday.getDate() + 1);
  }
  return weekdays.slice(offset).concat(weekdays.slice(0, offset));
};
var getWeekdays_default = getWeekdays;

// src/getDateLabel.ts
import { isSameDay } from "date-fns";
var getDateLabel = (date, locale) => {
  const today = new Date();
  const formatter = new Intl.DateTimeFormat(locale, {
    month: "long",
    year: "numeric",
    weekday: "long"
  });
  const parts = formatter.formatToParts(date).reduce(
    (acc, part) => ({
      ...acc,
      [part.type]: part.value
    }),
    {}
  );
  return `${date.getDate()}, ${parts.weekday} ${parts.month} ${parts.year}${isSameDay(date, today) ? ", Today" : ""}`;
};
var getDateLabel_default = getDateLabel;

// src/Chevron.tsx
import React from "react";
var Chevron = () => /* @__PURE__ */ React.createElement("svg", {
  viewBox: "0 0 24 24",
  fill: "none",
  xmlns: "http://www.w3.org/2000/svg"
}, /* @__PURE__ */ React.createElement("path", {
  fillRule: "evenodd",
  clipRule: "evenodd",
  d: "M12.0002 15.5C11.7344 15.5015 11.4789 15.3972 11.2902 15.21L7.29019 11.21C6.89806 10.8179 6.89806 10.1821 7.29019 9.79C7.68231 9.39788 8.31807 9.39788 8.71019 9.79L12.0002 13.1L15.3002 9.92V9.92C15.6695 9.50935 16.3018 9.47584 16.7124 9.84514C17.1231 10.2145 17.1566 10.8467 16.7873 11.2574C16.7542 11.2942 16.7184 11.3285 16.6802 11.36L12.6802 15.22C12.4973 15.3963 12.2542 15.4964 12.0002 15.5L12.0002 15.5Z"
}));
var Chevron_default = Chevron;

// src/Calendar.tsx
import { isSameDay as isSameDay2 } from "date-fns";

// src/styled/BlankCell.js
import styled from "styled-components";
var BlankCell = styled.div`
  width: 24px;
  height: 24px;
`;
var BlankCell_default = BlankCell;

// src/styled/CalendarGrid.js
import styled2 from "styled-components";
var CalendarGrid = styled2.section`
  display: grid;
  grid-template-columns: minmax(0, 1fr);
  grid-gap: 4px;
`;
var CalendarGrid_default = CalendarGrid;

// src/styled/CalendarRow.js
import styled3 from "styled-components";
var CalendarRow = styled3.div`
  display: grid;
  grid-template-columns: repeat(7, minmax(0, max-content));
  grid-gap: 4px;
`;
var CalendarRow_default = CalendarRow;

// src/styled/Container.js
import styled4 from "styled-components";
var Container = styled4.div`
  --moedim-primary: #1a73e8;
  border: 2px solid #cfcfcf;
  border-radius: 4px;
  background: #fff;
  font-family: inherit;
  font-size: 18px;
  line-height: 28px;
  color: #171717;
  width: max-content;
  padding: 12px;
`;
var Container_default = Container;

// src/styled/DateCell.js
import styled5 from "styled-components";
var DateCell = styled5.button`
  width: 24px;
  height: 24px;
  line-height: 24px;
  font-size: 10px;
  display: table-cell;
  font-weight: 500;
  vertical-align: middle;
  cursor: pointer;
  outline: none;
  position: relative;
  padding: 0;
  border: 1px solid #fff;
  border-radius: 50%;
  background: transparent;
  box-sizing: border-box;
  font-family: inherit;

  &:hover {
    background: #f2f2f2;
  }

  &:focus {
    border: 1px solid var(--moedim-primary);
  }

  &[aria-pressed='true'] {
    background: var(--moedim-primary);
    color: #fff;
  }
`;
var DateCell_default = DateCell;

// src/styled/NavigationButton.js
import styled6 from "styled-components";
var NavigationButton = styled6.button`
  width: 24px;
  height: 24px;
  padding: 0;
  border: none;
  background: transparent;
  cursor: pointer;
  border-radius: 50%;
  outline: none;

  svg {
    width: 100%;
    fill: #666;
  }

  &:hover {
    background: #f2f2f2;
  }

  &:focus {
    background: #efefef;
  }

  &:first-of-type {
    transform: rotate(90deg);
  }

  &:last-of-type {
    transform: rotate(-90deg);
  }
`;
var NavigationButton_default = NavigationButton;

// src/styled/NavigationRow.js
import styled7 from "styled-components";
var NavigationRow = styled7.div`
  display: flex;
  align-items: center;
  justify-content: start;
`;
var NavigationRow_default = NavigationRow;

// src/styled/Title.js
import styled8 from "styled-components";
var Title = styled8.span`
  font-size: 14px;
  font-weight: 600;
  letter-spacing: 0.25px;
  line-height: 20px;
  padding-left: 5px;
`;
var Title_default = Title;

// src/styled/TitleCell.js
import styled9 from "styled-components";
var TitleCell = styled9.span`
  width: 24px;
  height: 24px;
  text-align: center;
  font-size: 10px;
  font-weight: 500;
  font-family: inherit;
  color: #666;
`;
var TitleCell_default = TitleCell;

// src/styled/TitleRow.js
import styled10 from "styled-components";
var TitleRow = styled10.section`
  display: grid;
  grid-template-columns: minmax(0, 1fr) minmax(0, max-content);
  grid-gap: 8px;
  align-items: center;
  justify-content: space-between;
`;
var TitleRow_default = TitleRow;

// src/Calendar.tsx
var Calendar = ({ className, value = new Date(), locale = "en-US", onChange }, ref) => {
  const [visibleDate, setVisibleDate] = useState(value);
  const monthFormatter = useMemo(
    () => new Intl.DateTimeFormat(locale, {
      month: "long",
      year: "numeric"
    }),
    [locale]
  );
  const weekInfo = useMemo(() => new Intl.Locale(locale).weekInfo || {}, [locale]);
  const month = monthFormatter.format(visibleDate);
  const calendar = calendarize(visibleDate, weekInfo.firstDay || 0);
  const weekdays = getWeekdays_default(locale, weekInfo.firstDay || 0);
  const handleNextMonth = () => {
    setVisibleDate(new Date(visibleDate.setMonth(visibleDate.getMonth() + 1)));
  };
  const handlePreviousMonth = () => {
    setVisibleDate(new Date(visibleDate.setMonth(visibleDate.getMonth() - 1)));
  };
  return /* @__PURE__ */ React2.createElement(Container_default, {
    className,
    ref
  }, /* @__PURE__ */ React2.createElement(TitleRow_default, {
    "aria-label": "Calendar Navigation"
  }, /* @__PURE__ */ React2.createElement(Title_default, null, month), /* @__PURE__ */ React2.createElement(NavigationRow_default, null, /* @__PURE__ */ React2.createElement(NavigationButton_default, {
    type: "button",
    "aria-label": `Previous month`,
    onClick: handlePreviousMonth
  }, /* @__PURE__ */ React2.createElement(Chevron_default, null)), /* @__PURE__ */ React2.createElement(NavigationButton_default, {
    type: "button",
    "aria-label": `Next month`,
    onClick: handleNextMonth
  }, /* @__PURE__ */ React2.createElement(Chevron_default, null)))), /* @__PURE__ */ React2.createElement(CalendarGrid_default, {
    "aria-label": "Calendar Dates"
  }, /* @__PURE__ */ React2.createElement(CalendarRow_default, null, weekdays.map((weekday) => /* @__PURE__ */ React2.createElement(TitleCell_default, {
    key: weekday,
    title: weekday
  }, weekday[0]))), calendar.map((week, i) => /* @__PURE__ */ React2.createElement(CalendarRow_default, {
    key: i
  }, week.map(
    (day, j) => day !== 0 ? /* @__PURE__ */ React2.createElement(DateCell_default, {
      type: "button",
      "aria-pressed": isSameDay2(
        value,
        new Date(visibleDate.getFullYear(), visibleDate.getMonth(), day)
      ),
      "aria-label": getDateLabel_default(
        new Date(value.getFullYear(), value.getMonth(), day),
        locale
      ),
      key: j,
      onClick: () => onChange(new Date(visibleDate.getFullYear(), visibleDate.getMonth(), day))
    }, day) : /* @__PURE__ */ React2.createElement(BlankCell_default, {
      key: `empty-cell-${j}`
    })
  )))));
};
var Calendar_default = forwardRef(Calendar);

// src/index.ts
var src_default = Calendar_default;
export {
  src_default as default
};
